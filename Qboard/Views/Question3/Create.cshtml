@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<h2>Create</h2>
@model Qboard.Models.QuestionViewModel
@using (Html.BeginForm())
{
@Html.AntiForgeryToken()

                <div class="form-horizontal">
                    <h4>Question</h4>
                    <hr />
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    <div class="form-group">
                        @Html.LabelFor(model => model.Created, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @DateTime.Now
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.Label("Select Exam", new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.DropDownListFor(m=>m.Exams, Model.Exams.Select(s => new SelectListItem { Text = s.ExamName, Value = s.Id.ToString() }).ToList(), new { @class = "form-control col-md-2" })
                            @Html.ValidationMessage("Exams", "", new { @class = "text-danger" })
                        </div>
                    </div>

                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    <div class="form-group">
                        @Html.LabelFor(model => model.Question, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @*@Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })*@
                            @Html.TextAreaFor(m => m.Question, new { cols = 55, @rows = 3 })
                            @Html.ValidationMessageFor(m => m.Question, "", new { @class = "text-danger" })

                        </div>
                    </div>
                    <div class="form-group">
                        <label class="control-label col-md-2">Answers</label>
                        <div class="col-md-7" id="pnlAnswer">
                            <input class="control-label col-md-11 txtAnswer" />
                            <input type="button" class="btn btn-link" id="btnAddAnswer" value="Add" />
                        </div>
                    </div>

                    @*<div class="form-group">
                            @Html.Label("Skill")
                            <div class="col-md-10">
                                @Html.DropDownList("Skill", Model.Skills.Select(s=>new SelectListItem { Text=s.Name,Value=s.Id.ToString()}).ToList(),new { @class = "control-label col-md-2" })
                                @Html.ValidationMessageFor(model => model.Skills,"",new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="control-label col-md-2">Contemparay Level</label>
                            <div class="col-md-10">
                                @Html.DropDownListFor(model => model.ContempararyLevels,Model.ContempararyLevels.Select(k=>new SelectListItem{Text=k.Name,Value=k.Id.ToString() }).ToList(), new { @class = "form-control" } )
                                @Html.ValidationMessageFor(model => model.ContempararyLevels, "", new { @class = "text-danger" })
                            </div>
                        </div>*@

                    @*@Html.HiddenFor(model => model.VoteCount)
                        @Html.HiddenFor(model => model.AnswerCount)
                        @Html.HiddenFor(model => model.ViewrCount)*@


                    <div class="form-group">
                        <div class="col-md-offset-2 col-md-10">
                            <input type="button" onclick="savequestion();" value="Create" class="btn btn-default" />
                        </div>
                    </div>
                </div>}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
    document.addEventListener('readystatechange', doc => {
        if (doc.target.readyState === 'complete') {
            $('#btnAddAnswer').click(function (e) {
                $('#pnlAnswer').append($('#pnlAnswer .txtAnswer').last().clone().val(''));
            })
        }
    })
    function savequestion() {
        var answer = [];
        var examid = $('[name=exams]').val();
        $('#pnlAnswer .txtAnswer').each(function (i,el) {
            answer.push(el.value);
        })
        var QuestionViewModel = {
            Question: $('[name=Question]').val(), Answer: answer, ExamId:examid
        }
        insertdata('/Question/Create', { QuestionViewModel: QuestionViewModel });
        console.log(model)
    }
    </script>
}


